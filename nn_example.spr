array in 
[
  [0 0 1] 
  [1 1 1] 
  [1 0 1]
];
array out [[0 1 1]];
array test [0 0 0];
array weight1 [[0 0 0]];
array weight2 [[0 0 0]];

for i = 0, i < 10000
  weight1 = TEST (in, out, weight1)
  # PRINTALL(weight1, 0)
  test = RUN(in, weight1)
  # PRINTALL(GROW(test), 1)
  weight2 = TEST (GROW(test), out, weight2)
  # PRINTALL(weight2, 2)
  ;

test = RUN([[1 0 1]], weight1); # change `[0 0 1]` to whatever you want to test. The out put should match the first element of the array
printd(test[0]);

func [0] RUN (in [[0]] weight [[0]]) 
  NORMALIZE(EXP(NEGATE(DOT(in, weight)))); # this is kind of complicated, but basically what we are doing is:
  # 1) Create a dot product of the input and weight
  # 2) Use that to generate a Sigmoid curve
  # 3) Return the slope normalized between 0 and 1


func [[0]] TEST (in [[0]] out [[0]] bweight [[0]]) {
  array test [0 0 0];
  array weight [0 0 0];
  array layer [0 0 0];

  for i = 0, i < 3 # shrink the weight so we can work with it - we wont have to do this in the future.
    weight[i] = bweight[0][i];
  
  test = RUN(in, bweight);
  weight = ADD( # update the weight according to the test we ran
    weight, # the old weight
    MULTIPLY(
      MULTIPLY(
        DOT(in, SUBTRACT(out, test)), test # the dot product of the input and the expected output minus the test we just ran
      ), 
      DECREMENT(test)
    )
  );
  
  array nweight [[0 0 0]]; # this is just to put the weight into another array so we can use the dot product of it above
  for i = 0, i < 3 
    nweight[0][i] = weight[i];

  nweight; # this is the return value
}

