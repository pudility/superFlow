; ModuleID = 'library/library.cpp'
source_filename = "library/library.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }

@__stderrp = external global %struct.__sFILE*, align 8
@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

; Function Attrs: noinline optnone ssp uwtable
define double @printd(double) #0 {
  %2 = alloca double, align 8
  store double %0, double* %2, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %4 = load double, double* %2, align 8
  %5 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %4)
  ret double 0.000000e+00
}

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

attributes #0 = { noinline optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
; ModuleID = 'out.ll'
source_filename = "out.ll"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

declare double @exp(double)

define [4 x double] @MULTIPLY([4 x double] %A, [4 x double] %B) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %B2 = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  store [4 x double] %B, [4 x double]* %B2
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i3 = load double, double* %i
  %3 = fptoui double %i3 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i4 = load double, double* %i
  %5 = fptoui double %i4 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %i5 = load double, double* %i
  %7 = fptoui double %i5 to i32
  %8 = getelementptr [4 x double], [4 x double]* %B2, i32 0, i32 %7
  %__6 = load double, double* %8
  %multmp = fmul double %__, %__6
  store double %multmp, double* %4
  %i7 = load double, double* %i
  %nextvar = fadd double %i7, 1.000000e+00
  store double %nextvar, double* %i
  %i8 = load double, double* %i
  %cmptmp = fcmp ult double %i8, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out9 = load [4 x double], [4 x double]* %out
  %out10 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out10
}

define [4 x double] @DECREMENT([4 x double] %A) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = load double, double* %i
  %3 = fptoui double %i2 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i3 = load double, double* %i
  %5 = fptoui double %i3 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %subtmp = fsub double 1.000000e+00, %__
  store double %subtmp, double* %4
  %i4 = load double, double* %i
  %nextvar = fadd double %i4, 1.000000e+00
  store double %nextvar, double* %i
  %i5 = load double, double* %i
  %cmptmp = fcmp ult double %i5, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out6 = load [4 x double], [4 x double]* %out
  %out7 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out7
}

define [4 x [4 x double]] @SUBTRACT([4 x [4 x double]] %A, [4 x double] %B) {
entry:
  %i = alloca double
  %out = alloca [4 x [4 x double]]
  %B2 = alloca [4 x double]
  %A1 = alloca [4 x [4 x double]]
  store [4 x [4 x double]] %A, [4 x [4 x double]]* %A1
  store [4 x double] %B, [4 x double]* %B2
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  %3 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %4 = insertvalue [4 x double] %3, double 0.000000e+00, 1
  %5 = insertvalue [4 x double] %4, double 0.000000e+00, 2
  %6 = insertvalue [4 x [4 x double]] undef, [4 x double] %5, 0
  store [4 x [4 x double]] %6, [4 x [4 x double]]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %7 = getelementptr [4 x [4 x double]], [4 x [4 x double]]* %out, i32 0, i32 0
  %i3 = load double, double* %i
  %8 = fptoui double %i3 to i32
  %9 = getelementptr [4 x double], [4 x double]* %7, i32 0, i32 %8
  %10 = getelementptr [4 x [4 x double]], [4 x [4 x double]]* %A1, i32 0, i32 0
  %i4 = load double, double* %i
  %11 = fptoui double %i4 to i32
  %12 = getelementptr [4 x double], [4 x double]* %10, i32 0, i32 %11
  %__ = load double, double* %12
  %i5 = load double, double* %i
  %13 = fptoui double %i5 to i32
  %14 = getelementptr [4 x double], [4 x double]* %B2, i32 0, i32 %13
  %__6 = load double, double* %14
  %subtmp = fsub double %__, %__6
  store double %subtmp, double* %9
  %i7 = load double, double* %i
  %nextvar = fadd double %i7, 1.000000e+00
  store double %nextvar, double* %i
  %i8 = load double, double* %i
  %cmptmp = fcmp ult double %i8, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out9 = load [4 x [4 x double]], [4 x [4 x double]]* %out
  %out10 = load [4 x [4 x double]], [4 x [4 x double]]* %out
  ret [4 x [4 x double]] %out10
}

define [4 x double] @DOT([4 x [4 x double]] %A, [4 x [4 x double]] %B) {
entry:
  %j = alloca double
  %i = alloca double
  %out = alloca [4 x double]
  %B2 = alloca [4 x [4 x double]]
  %A1 = alloca [4 x [4 x double]]
  store [4 x [4 x double]] %A, [4 x [4 x double]]* %A1
  store [4 x [4 x double]] %B, [4 x [4 x double]]* %B2
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %afterloop, %entry
  store double 0.000000e+00, double* %j
  br label %loop3

loop3:                                            ; preds = %loop3, %loop
  %i4 = load double, double* %i
  %3 = fptoui double %i4 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i5 = load double, double* %i
  %5 = fptoui double %i5 to i32
  %6 = getelementptr [4 x [4 x double]], [4 x [4 x double]]* %A1, i32 0, i32 %5
  %j6 = load double, double* %j
  %7 = fptoui double %j6 to i32
  %8 = getelementptr [4 x double], [4 x double]* %6, i32 0, i32 %7
  %__ = load double, double* %8
  %9 = getelementptr [4 x [4 x double]], [4 x [4 x double]]* %B2, i32 0, i32 0
  %j7 = load double, double* %j
  %10 = fptoui double %j7 to i32
  %11 = getelementptr [4 x double], [4 x double]* %9, i32 0, i32 %10
  %__8 = load double, double* %11
  %multmp = fmul double %__, %__8
  %i9 = load double, double* %i
  %12 = fptoui double %i9 to i32
  %13 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %12
  %__10 = load double, double* %13
  %addtmp = fadd double %multmp, %__10
  store double %addtmp, double* %4
  %j11 = load double, double* %j
  %nextvar = fadd double %j11, 1.000000e+00
  store double %nextvar, double* %j
  %j12 = load double, double* %j
  %cmptmp = fcmp ult double %j12, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop3, label %afterloop

afterloop:                                        ; preds = %loop3
  %i13 = load double, double* %i
  %nextvar14 = fadd double %i13, 1.000000e+00
  store double %nextvar14, double* %i
  %i15 = load double, double* %i
  %cmptmp16 = fcmp ult double %i15, 3.000000e+00
  %booltmp17 = uitofp i1 %cmptmp16 to double
  %loopcond18 = fcmp one double %booltmp17, 0.000000e+00
  br i1 %loopcond18, label %loop, label %afterloop19

afterloop19:                                      ; preds = %afterloop
  %out20 = load [4 x double], [4 x double]* %out
  %out21 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out21
}

define [4 x double] @INCREMENT([4 x double] %A) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = load double, double* %i
  %3 = fptoui double %i2 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i3 = load double, double* %i
  %5 = fptoui double %i3 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %addtmp = fadd double %__, 1.000000e+00
  store double %addtmp, double* %4
  %i4 = load double, double* %i
  %nextvar = fadd double %i4, 1.000000e+00
  store double %nextvar, double* %i
  %i5 = load double, double* %i
  %cmptmp = fcmp ult double %i5, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out6 = load [4 x double], [4 x double]* %out
  %out7 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out7
}

define [4 x double] @ADD([4 x double] %A, [4 x double] %B) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %B2 = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  store [4 x double] %B, [4 x double]* %B2
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i3 = load double, double* %i
  %3 = fptoui double %i3 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i4 = load double, double* %i
  %5 = fptoui double %i4 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %i5 = load double, double* %i
  %7 = fptoui double %i5 to i32
  %8 = getelementptr [4 x double], [4 x double]* %B2, i32 0, i32 %7
  %__6 = load double, double* %8
  %addtmp = fadd double %__, %__6
  store double %addtmp, double* %4
  %i7 = load double, double* %i
  %nextvar = fadd double %i7, 1.000000e+00
  store double %nextvar, double* %i
  %i8 = load double, double* %i
  %cmptmp = fcmp ult double %i8, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out9 = load [4 x double], [4 x double]* %out
  %out10 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out10
}

define [4 x double] @DIVIDE([4 x double] %A) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = load double, double* %i
  %3 = fptoui double %i2 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i3 = load double, double* %i
  %5 = fptoui double %i3 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %divtmp = fdiv double 1.000000e+00, %__
  store double %divtmp, double* %4
  %i4 = load double, double* %i
  %nextvar = fadd double %i4, 1.000000e+00
  store double %nextvar, double* %i
  %i5 = load double, double* %i
  %cmptmp = fcmp ult double %i5, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out6 = load [4 x double], [4 x double]* %out
  %out7 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out7
}

define [4 x double] @NORMALIZE([4 x double] %A) {
entry:
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  %A2 = load [4 x double], [4 x double]* %A1
  %calltmp = call [4 x double] @INCREMENT([4 x double] %A2)
  store [4 x double] %calltmp, [4 x double]* %out
  %out3 = load [4 x double], [4 x double]* %out
  %calltmp4 = call [4 x double] @DIVIDE([4 x double] %out3)
  store [4 x double] %calltmp4, [4 x double]* %out
  %out5 = load [4 x double], [4 x double]* %out
  %out6 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out6
}

define [4 x double] @EXP([4 x double] %A) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = load double, double* %i
  %3 = fptoui double %i2 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i3 = load double, double* %i
  %5 = fptoui double %i3 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %calltmp = call double @exp(double %__)
  store double %calltmp, double* %4
  %i4 = load double, double* %i
  %nextvar = fadd double %i4, 1.000000e+00
  store double %nextvar, double* %i
  %i5 = load double, double* %i
  %cmptmp = fcmp ult double %i5, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out6 = load [4 x double], [4 x double]* %out
  %out7 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out7
}

define [4 x double] @NEGATE([4 x double] %A) {
entry:
  %i = alloca double
  %out = alloca [4 x double]
  %A1 = alloca [4 x double]
  store [4 x double] %A, [4 x double]* %A1
  %0 = insertvalue [4 x double] undef, double 0.000000e+00, 0
  %1 = insertvalue [4 x double] %0, double 0.000000e+00, 1
  %2 = insertvalue [4 x double] %1, double 0.000000e+00, 2
  store [4 x double] %2, [4 x double]* %out
  store double 0.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = load double, double* %i
  %3 = fptoui double %i2 to i32
  %4 = getelementptr [4 x double], [4 x double]* %out, i32 0, i32 %3
  %i3 = load double, double* %i
  %5 = fptoui double %i3 to i32
  %6 = getelementptr [4 x double], [4 x double]* %A1, i32 0, i32 %5
  %__ = load double, double* %6
  %subtmp = fsub double 0.000000e+00, %__
  store double %subtmp, double* %4
  %i4 = load double, double* %i
  %nextvar = fadd double %i4, 1.000000e+00
  store double %nextvar, double* %i
  %i5 = load double, double* %i
  %cmptmp = fcmp ult double %i5, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %out6 = load [4 x double], [4 x double]* %out
  %out7 = load [4 x double], [4 x double]* %out
  ret [4 x double] %out7
}

declare double @printd(double)

define double @__anon_expr0() {
entry:
  %i = alloca double
  store double 1.000000e+01, double* %i
  %i1 = load double, double* %i
  %addtmp = fadd double %i1, 1.000000e+00
  store double %addtmp, double* %i
  %i2 = load double, double* %i
  %calltmp = call double @printd(double %i2)
  %i3 = load double, double* %i
  %calltmp4 = call double @printd(double %i3)
  ret double %calltmp4
}

define i32 @main() {
  %1 = call double @__anon_expr0()
  ret i32 0
}
